//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Islam
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AlKuranDBEntities : DbContext
    {
        public AlKuranDBEntities()
            : base("name=AlKuranDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrators> Administrators { get; set; }
        public virtual DbSet<Articles> Articles { get; set; }
        public virtual DbSet<Ayats> Ayats { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<SurahNumbers> SurahNumbers { get; set; }
        public virtual DbSet<Surahs> Surahs { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_GetAyatsBySearchPhrase(string phrase)
        {
            var phraseParameter = phrase != null ?
                new ObjectParameter("Phrase", phrase) :
                new ObjectParameter("Phrase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAyatsBySearchPhrase", phraseParameter);
        }
    
        public virtual int sp_GetAyatsBySearchPhrase_1(string phrase)
        {
            var phraseParameter = phrase != null ?
                new ObjectParameter("Phrase", phrase) :
                new ObjectParameter("Phrase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAyatsBySearchPhrase_1", phraseParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> sp_GetBookId(string bookName)
        {
            var bookNameParameter = bookName != null ?
                new ObjectParameter("BookName", bookName) :
                new ObjectParameter("BookName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("sp_GetBookId", bookNameParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPassword(string adminLogin)
        {
            var adminLoginParameter = adminLogin != null ?
                new ObjectParameter("AdminLogin", adminLogin) :
                new ObjectParameter("AdminLogin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPassword", adminLoginParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_InsertArticle(string articleTitle, string articleAnnotation, string articleText, Nullable<int> m_Id)
        {
            var articleTitleParameter = articleTitle != null ?
                new ObjectParameter("ArticleTitle", articleTitle) :
                new ObjectParameter("ArticleTitle", typeof(string));
    
            var articleAnnotationParameter = articleAnnotation != null ?
                new ObjectParameter("ArticleAnnotation", articleAnnotation) :
                new ObjectParameter("ArticleAnnotation", typeof(string));
    
            var articleTextParameter = articleText != null ?
                new ObjectParameter("ArticleText", articleText) :
                new ObjectParameter("ArticleText", typeof(string));
    
            var m_IdParameter = m_Id.HasValue ?
                new ObjectParameter("M_Id", m_Id) :
                new ObjectParameter("M_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertArticle", articleTitleParameter, articleAnnotationParameter, articleTextParameter, m_IdParameter);
        }
    
        public virtual int sp_InsertAyat(Nullable<int> ayatNumber, string ayatText, Nullable<int> s_Id)
        {
            var ayatNumberParameter = ayatNumber.HasValue ?
                new ObjectParameter("AyatNumber", ayatNumber) :
                new ObjectParameter("AyatNumber", typeof(int));
    
            var ayatTextParameter = ayatText != null ?
                new ObjectParameter("AyatText", ayatText) :
                new ObjectParameter("AyatText", typeof(string));
    
            var s_IdParameter = s_Id.HasValue ?
                new ObjectParameter("S_Id", s_Id) :
                new ObjectParameter("S_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAyat", ayatNumberParameter, ayatTextParameter, s_IdParameter);
        }
    
        public virtual int sp_InsertNamePassword(string loginName, string password)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertNamePassword", loginNameParameter, passwordParameter);
        }
    
        public virtual int sp_InsertSurah(string surahName, Nullable<short> b_Id, ObjectParameter s_Id)
        {
            var surahNameParameter = surahName != null ?
                new ObjectParameter("SurahName", surahName) :
                new ObjectParameter("SurahName", typeof(string));
    
            var b_IdParameter = b_Id.HasValue ?
                new ObjectParameter("B_Id", b_Id) :
                new ObjectParameter("B_Id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSurah", surahNameParameter, b_IdParameter, s_Id);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_UpdateArticle(string articleTitle, string articleAnnotation, string articleText, Nullable<int> a_Id)
        {
            var articleTitleParameter = articleTitle != null ?
                new ObjectParameter("ArticleTitle", articleTitle) :
                new ObjectParameter("ArticleTitle", typeof(string));
    
            var articleAnnotationParameter = articleAnnotation != null ?
                new ObjectParameter("ArticleAnnotation", articleAnnotation) :
                new ObjectParameter("ArticleAnnotation", typeof(string));
    
            var articleTextParameter = articleText != null ?
                new ObjectParameter("ArticleText", articleText) :
                new ObjectParameter("ArticleText", typeof(string));
    
            var a_IdParameter = a_Id.HasValue ?
                new ObjectParameter("A_Id", a_Id) :
                new ObjectParameter("A_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateArticle", articleTitleParameter, articleAnnotationParameter, articleTextParameter, a_IdParameter);
        }
    
        public virtual int sp_UpdatePassword(Nullable<int> a_Id, string password)
        {
            var a_IdParameter = a_Id.HasValue ?
                new ObjectParameter("A_Id", a_Id) :
                new ObjectParameter("A_Id", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePassword", a_IdParameter, passwordParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
